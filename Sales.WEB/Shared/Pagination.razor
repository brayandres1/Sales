<nav>
    <ul class="pagination">

        @foreach (var link in Links)
        {
            <div >
                <li @onclick=@(() => InternalSelectedPage(link)) style="cursor: pointer" class="page-item @(link.Enable ? null : "disabled") @(link.Enable ? "active" : null)">
                    <a class="page-link">@link.Text</a>
                </li>
            </div>
            
        }
    </ul>
</nav>


@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; }
    //[Parameter] public int Radio { get; set; } I do not use it
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<PageModel> Links = new();

    protected override void OnParametersSet()
    {
        Links = new List<PageModel>();

        var previousLinkEnable = CurrentPage != 1;
        var previousLinkPage = (CurrentPage == 1) ? 1 : CurrentPage - 1;
        Links.Add(new PageModel
            {
                Text = "Anterior",
                Page = previousLinkPage,
                Enable = previousLinkEnable
            });


        var rangeMax = 10;
        for (int i = 1; i <= TotalPages; i++)
        {
            if (TotalPages > rangeMax) //When there are 10 pages or more
            {
                if (i <= rangeMax && CurrentPage <= rangeMax)   
                {
                    Links.Add(new PageModel
                        {
                            Page = i,
                            Enable = CurrentPage == i,
                            Text = $"{i}"

                        });

                }
                if (i > CurrentPage - rangeMax && i <= CurrentPage && CurrentPage > rangeMax)
                {
                    Links.Add(new PageModel
                        {
                            Page = i,
                            Enable = CurrentPage == i,
                            Text = $"{i}"

                        });

                }

                if (TotalPages <= rangeMax) //When there are 10 pages or less
                {
                    Links.Add(new PageModel
                        {
                            Page = i,
                            Enable = CurrentPage == i,
                            Text = $"{i}"

                        });
                }

            }
            

        }     

            
            

            
             

        var linkNextEnable = CurrentPage != TotalPages;
        var linkNextPage = (CurrentPage == TotalPages) ? TotalPages : CurrentPage + 1;
        Links.Add(new PageModel
            {
                Text = "Siguiente",
                Page = linkNextPage,
                Enable = linkNextEnable
            });

    }

    private async Task InternalSelectedPage(PageModel pageModel)
    {
        if (pageModel.Page == CurrentPage || pageModel.Page == 0)
        {
            return;
        }

        await SelectedPage.InvokeAsync(pageModel.Page);
    }

    class PageModel
    {
        public string Text { get; set; } = null!;
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}
